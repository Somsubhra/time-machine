#!/usr/bin/env python

__author__ = "Somsubhra Bairi"

# All imports
import sys
import shutil
import os
import errno
import time
import datetime

# All constant definitions
TIME_MACHINE_DIR = '.timemachine'
CURRENT_STATE_FILE = 'CURRENT'
LOG_FILE = 'LOGS'

# The time machine class
class TimeMachine:

	# Constructor for the time machine
	def __init__(self):
		# Unused
		pass

	# Initialize the time machine
	@staticmethod
	def init():
		os.makedirs(TIME_MACHINE_DIR)

	# Return the current state of the time machine
	@staticmethod
	def get_current_state():
		return Utils.file_read_line(os.path.join(TIME_MACHINE_DIR, CURRENT_STATE_FILE))

	# Get the logs of the time machine
	@staticmethod
	def get_logs():
		log_lines = Utils.file_read_lines(os.path.join(TIME_MACHINE_DIR, LOG_FILE))

		logs = {}

		for line in log_lines:
			cols = line.split()
			logs[cols[0]] = ' '.join(cols[1:])

		return logs

	# Print the logs of time machine
	@staticmethod
	def print_logs():
		logs = TimeMachine.get_logs()
		for timestamp in logs:
			time_str = time.strftime("%I:%M:%S%p on %B %d, %Y", time.localtime(float(timestamp)))
			Logger.log("<" + time_str + "> - " + logs[timestamp])

	# Save the current version in time machine
	@staticmethod
	def save(message):

		if message == "":
			message = "Saved at " + datetime.datetime.now().strftime("%I:%M:%S%p on %B %d, %Y")

		try:
			os.stat(TIME_MACHINE_DIR)
		except:
			TimeMachine.init()

		dir_name = str(int(time.time()))
		Utils.copy(os.getcwd(), os.path.join(TIME_MACHINE_DIR, dir_name))

		Utils.file_write(os.path.join(TIME_MACHINE_DIR, CURRENT_STATE_FILE), dir_name)
		Utils.file_append(os.path.join(TIME_MACHINE_DIR, LOG_FILE), dir_name + " " + message)

# The Utility class
class Utils:

	# Constructor for the utility class
	def __init__(self):
		# Unused
		pass

	# Paths to ignore while copying
	@staticmethod
	def ignore_copy(ignore):
		def _ignore_(path, names):
			ignored_names = []
			if ignore in names:
				ignored_names.append(ignore)
			return set(ignored_names)
		return _ignore_

	# Copy the source tree to destination
	@staticmethod
	def copy(src, dest):
		try:
			shutil.copytree(src, dest, ignore=Utils.ignore_copy(TIME_MACHINE_DIR))
		except OSError as e:
			if e.errno == errno.ENOTDIR:
				shutil.copy(src, dst)
			else:
				Logger.log_error("Could not save snapshot in time machine")

	# Write to file
	@staticmethod
	def file_write(file_path, content):
		try:
			f = open(file_path, 'w')
			f.write(str(content))
			f.close()
		except:
			Logger.log_error("Could not access time machine")

	# Append line to file
	@staticmethod
	def file_append(file_path, line):
		try:
			f = open(file_path, 'a')
			f.write(str(line) + '\n')
			f.close()
		except:
			Logger.log_error("Could not access time machine")

	# Read first line of file
	@staticmethod
	def file_read_line(file_path):
		try:
			f = open(file_path, 'r')
			line = f.readline()
			f.close()
			return line
		except:
			Logger.log_error("Could not access time machine")
			return ""

	# Read all lines of file
	@staticmethod
	def file_read_lines(file_path):
		try:
			f = open(file_path, 'r')
			lines = f.readlines()
			f.close()
			return lines
		except:
			Logger.log_error("Could not access time machine")
			return []

# The Logger class
class Logger:

	# Constructor for the Logger class
	def __init__(self):
		# Unused
		pass

	# Log text
	@staticmethod
	def log(message):
		print '\033[93m' + str(message) + '\033[0m'

	# Log a message
	@staticmethod
	def log_message(message):
		print '\033[94m' + '-- ' + str(message) + '\033[0m'

	# Log an error
	@staticmethod
	def log_error(message):
		print '\033[91m' + 'Error: ' + str(message) + '\033[0m'

	# Log success
	@staticmethod
	def log_success(message):
		print '\033[92m' + 'Success: ' + str(message) + '\033[0m'

	# Log a result
	@staticmethod
	def log_usage(message):
		print '\033[93m' + 'Usage: ' + str(message) + '\033[0m'

def main():
	args = sys.argv

	if len(args) < 2:
		usage = '''
		timemachine save
		'''
		Logger.log_usage(usage)
		return

	if args[1] == 'save':
		
		message = ""

		if len(args) > 2:
			message = args[2:]
			message = ' '.join(message)

		TimeMachine.save(message)

	elif args[1] == 'logs':
		TimeMachine.print_logs()

if __name__ == "__main__":
	main()